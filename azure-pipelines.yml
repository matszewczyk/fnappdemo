trigger:
- main

paths:
  exclude:
    - README.md
    - azure-pipelines.yaml

variables:

  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'fcba54f2-eb4d-4ac3-b705-42d3daaee2c2'

  # Function app name (without env suffix)
  functionAppName: 'fnappdemo'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/'

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - bash: |
        if [ -f extensions.csproj ]
        then
            dotnet build extensions.csproj --runtime ubuntu.16.04-x64 --output ./bin
        fi
      workingDirectory: $(workingDirectory)
      displayName: 'Build extensions'

    - task: UsePythonVersion@0
      displayName: 'Use Python 3.10.12'
      inputs:
        versionSpec: 3.10.12 

    - bash: |
        pip install --target="./.python_packages/lib/site-packages" -r ./requirements.txt
      workingDirectory: $(workingDirectory)
      displayName: 'Install application dependencies'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(workingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Test
  displayName: Test stage
  dependsOn: Build
  condition: succeeded()

  jobs:
  - job: Test
    displayName: Test
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python 3.10.12'
      inputs:
        versionSpec: 3.10.12 

    - task: CmdLine@2
      displayName: 'Run unit tests'
      inputs:
        script: |
          pip install -r requirements.txt
          pytest tests/

- stage: DeployDev
  displayName: Deploy to dev
  dependsOn: Test
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'development'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              resourceGroupName: 'fnappdemo-dev'
              appType: functionAppLinux
              appName: $(functionAppName)-dev
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'

- stage: DeployQA
  displayName: Deploy to qa
  dependsOn: DeployDev
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'qa'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              resourceGroupName: 'fnappdemo-qa'
              appType: functionAppLinux
              appName: $(functionAppName)-qa
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'

          - job: ManualReviewQA
            displayName: 'Manual review'
            dependsOn: Deploy
            pool:
              vmImage: $(vmImageName)
            steps:
            - task: ManualValidation@0
              displayName: 'Manual review'
              inputs:
                instructions: 'Please review the deployment and approve or reject it.'

- stage: DeployProd
  displayName: Deploy to prod
  dependsOn: DeployQA
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'production'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(azureSubscription)'
              resourceGroupName: 'fnappdemo-prod'
              appType: functionAppLinux
              appName: $(functionAppName)-prod
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'